import aiohttp
import os
import sys
import threading
import asyncio
import json
import websockets
from queue import Queue
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sym_padding
from cryptography.hazmat.backends import default_backend

BASE_URL = "http://localhost:8000"
KEYS_DIR = "keys"
realtime_queue = Queue()

def ensure_keys_dir():
    os.makedirs(KEYS_DIR, exist_ok=True)

def generate_keys():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π RSA"""
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    public_key = private_key.public_key()
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    return private_pem, public_pem

def save_keys(private_pem, public_pem, username):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª—ã"""
    ensure_keys_dir()
    with open(f"{KEYS_DIR}/{username}_private.pem", "wb") as f:
        f.write(private_pem)
    with open(f"{KEYS_DIR}/{username}_public.pem", "wb") as f:
        f.write(public_pem)

def load_private_key(username):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with open(f"{KEYS_DIR}/{username}_private.pem", "rb") as f:
            return f.read()
    except FileNotFoundError:
        return None

def load_public_key(username):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with open(f"{KEYS_DIR}/{username}_public.pem", "rb") as f:
            return f.read()
    except FileNotFoundError:
        return None

def encrypt_message(message, public_key_pem):
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    public_key = serialization.load_pem_public_key(
        public_key_pem,
        backend=default_backend()
    )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ IV
    session_key = os.urandom(32)  # AES-256
    iv = os.urandom(16)           # AES block size
    
    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è AES
    padder = sym_padding.PKCS7(128).padder()
    padded_data = padder.update(message.encode()) + padder.finalize()
    
    cipher = Cipher(algorithms.AES(session_key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()
    
    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ RSA
    encrypted_key = public_key.encrypt(
        session_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–∞—á–∏
    return {
        "encrypted_key": encrypted_key.hex(),
        "ciphertext": ciphertext.hex(),
        "iv": iv.hex()
    }

def decrypt_message(private_key_pem, encrypted_key_hex, iv_hex, ciphertext_hex):
    """–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    private_key = serialization.load_pem_private_key(
        private_key_pem,
        password=None,
        backend=default_backend()
    )
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ hex
    encrypted_key = bytes.fromhex(encrypted_key_hex)
    iv = bytes.fromhex(iv_hex)
    ciphertext = bytes.fromhex(ciphertext_hex)
    
    # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    session_key = private_key.decrypt(
        encrypted_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    
    # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    cipher = Cipher(algorithms.AES(session_key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ padding
    unpadder = sym_padding.PKCS7(128).unpadder()
    plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()
    
    return plaintext.decode()

async def exchange_keys(username: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±–º–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    public_key = load_public_key(username)
    if not public_key:
        print("üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏ —Å–Ω–∞—á–∞–ª–∞.")
        return None
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                f"{BASE_URL}/exchange_keys",
                json={"username": username, "public_key": public_key.decode()}
            ) as response:
                if response.status == 200:
                    print("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏: {response.status}")
                    return False
        except Exception as e:
            print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False

async def get_remote_public_key(username: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{BASE_URL}/public_key/{username}") as response:
                if response.status == 200:
                    data = await response.json()
                    return data["public_key"].encode()
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: {await response.text()}")
                    return None
        except Exception as e:
            print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return None

async def send_private_message(sender: str, recipient: str, message: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    public_key_pem = await get_remote_public_key(recipient)
    if not public_key_pem:
        return None
    
    encrypted = encrypt_message(message, public_key_pem)
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                f"{BASE_URL}/send_private",
                json={
                    "sender": sender,
                    "recipient": recipient,
                    "encrypted_key": encrypted["encrypted_key"],
                    "iv": encrypted["iv"],
                    "ciphertext": encrypted["ciphertext"]
                }
            ) as response:
                if response.status == 200:
                    print("‚úâÔ∏è –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    return await response.json()
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return None
        except Exception as e:
            print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return None

async def get_private_messages(username: str, limit: int = 100):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    params = {"limit": limit}
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(
                f"{BASE_URL}/private_messages/{username}",
                params=params
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {response.status}")
                    return None
        except Exception as e:
            print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return None

def print_private_messages(messages, username):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not messages:
        print("\nüì≠ –ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    print("\n" + "="*50)
    print("üì¨ –ü–†–ò–í–ê–¢–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø".center(50))
    print("="*50)
    
    for msg in messages:
        private_key = load_private_key(username)
        if not private_key:
            print("üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        try:
            decrypted = decrypt_message(
                private_key,
                msg["encrypted_key"],
                msg["iv"],
                msg["ciphertext"]
            )
            direction = "‚Üí" if msg["sender"] == username else "‚Üê"
            color = "\033[94m" if direction == "‚Üí" else "\033[92m"
            other_user = msg["recipient"] if direction == "‚Üí" else msg["sender"]
            
            print(f"\n{color}[{msg['timestamp']}] {direction} {other_user}\033[0m")
            print(f"   {decrypted}")
            print("-"*50)
        except Exception as e:
            print(f"üîì –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def websocket_listener(username: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π WebSocket listener"""
    uri = f"ws://localhost:8000/ws/{username}"
    while True:
        try:
            async with websockets.connect(uri) as websocket:
                async for message in websocket:
                    data = json.loads(message)
                    await realtime_queue.put(data)
        except Exception as e:
            print(f"üîå WebSocket error: {e}, reconnecting in 5 seconds...")
            await asyncio.sleep(5)

async def handle_realtime_messages(username):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    while True:
        if not realtime_queue.empty():
            msg = await realtime_queue.get()
            if msg.get("type") == "private_message" and msg["recipient"] == username:
                try:
                    private_key = load_private_key(username)
                    decrypted = decrypt_message(
                        private_key,
                        msg["encrypted_key"],
                        msg["iv"],
                        msg["ciphertext"]
                    )
                    print("\n" + "="*50)
                    print(f"\033[93m‚úâÔ∏è –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢ {msg['sender']}!\033[0m")
                    print(f"   {decrypted}")
                    print("="*50)
                    print("\n>>> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ", end="", flush=True)
                except Exception as e:
                    print(f"üîì –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await asyncio.sleep(0.1)

def print_menu():
    """–í–∏–∑—É–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é"""
    print("\n" + "="*50)
    print("üîê –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô".center(50))
    print("="*50)
    print("1. üîÑ –û–±–º–µ–Ω—è—Ç—å –∫–ª—é—á–∏")
    print("2. üîë –ü–æ–ª—É—á–∏—Ç—å —á—É–∂–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á")
    print("3. ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("4. üì¨ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("5. üö™ –í—ã—Ö–æ–¥")
    print("="*50)

async def main():
    ensure_keys_dir()
    username = None
    
    print("\033[94m" + "="*50)
    print("üîê –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –° E2E –®–ò–§–†–û–í–ê–ù–ò–ï–ú".center(50))
    print("="*50 + "\033[0m")
    
    while not username:
        username = input("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        if not username:
            print("üö´ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
    private_key = load_private_key(username)
    public_key = load_public_key(username)
    
    if not private_key or not public_key:
        print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π...")
        private_pem, public_pem = generate_keys()
        save_keys(private_pem, public_pem, username)
        print(f"‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {KEYS_DIR}/")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(websocket_listener(username))
    asyncio.create_task(handle_realtime_messages(username))
    
    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while True:
        print_menu()
        choice = input("\n>>> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
        
        if choice == "1":
            if await exchange_keys(username):
                print("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            
        elif choice == "2":
            target = input("üë• –ß–µ–π –∫–ª—é—á –ø–æ–ª—É—á–∏—Ç—å? ")
            key = await get_remote_public_key(target)
            if key:
                print(f"üîë –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}:")
                print(key.decode())
            
        elif choice == "3":
            recipient = input("üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ")
            message = input("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ")
            await send_private_message(username, recipient, message)
            
        elif choice == "4":
            limit = input("üìä –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ")
            try:
                limit = int(limit) if limit.strip() else 100
            except ValueError:
                limit = 100
            messages = await get_private_messages(username, limit)
            print_private_messages(messages, username)
            
        elif choice == "5":
            print("üö™ –í—ã—Ö–æ–¥...")
            break
            
        else:
            print("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è Windows
    if sys.platform == "win32":
        import colorama
        colorama.init()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüö´ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")